"""Fix schema inconsistencies and add missing tables

Revision ID: 118ce775137b
Revises: 5276d92b1907
Create Date: 2025-09-28 15:26:21.238545

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '118ce775137b'
down_revision: Union[str, Sequence[str], None] = '5276d92b1907'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('gps_locations',
    sa.Column('shipment_id', sa.UUID(), nullable=True),
    sa.Column('vehicle_id', sa.UUID(), nullable=True),
    sa.Column('latitude', sa.DECIMAL(precision=10, scale=8), nullable=False),
    sa.Column('longitude', sa.DECIMAL(precision=11, scale=8), nullable=False),
    sa.Column('altitude', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('accuracy', sa.DECIMAL(precision=6, scale=2), nullable=True),
    sa.Column('gps_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('server_time', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('speed', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('heading', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('source', sa.String(length=20), nullable=True),
    sa.Column('device_id', sa.String(length=50), nullable=True),
    sa.Column('raw_data', sa.JSON(), nullable=True),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('district', sa.String(length=100), nullable=True),
    sa.Column('is_valid', sa.String(length=1), nullable=True),
    sa.Column('is_real_time', sa.String(length=1), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['shipment_id'], ['shipments.id'], ),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_gps_locations_tenant_id'), 'gps_locations', ['tenant_id'], unique=False)
    op.alter_column('ai_conversations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('ai_conversations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_ai_conversations_id'), table_name='ai_conversations')
    op.alter_column('ai_model_configs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('ai_model_configs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_ai_model_configs_id'), table_name='ai_model_configs')
    op.alter_column('refresh_tokens', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('refresh_tokens', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_refresh_tokens_id'), table_name='refresh_tokens')
    op.drop_constraint(op.f('refresh_tokens_token_key'), 'refresh_tokens', type_='unique')
    op.drop_index(op.f('ix_refresh_tokens_token'), table_name='refresh_tokens')
    op.create_index(op.f('ix_refresh_tokens_token'), 'refresh_tokens', ['token'], unique=True)
    op.alter_column('shipments', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('shipments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_shipments_id'), table_name='shipments')
    op.drop_constraint(op.f('shipments_shipment_number_key'), 'shipments', type_='unique')
    op.drop_index(op.f('ix_shipments_shipment_number'), table_name='shipments')
    op.create_index(op.f('ix_shipments_shipment_number'), 'shipments', ['shipment_number'], unique=True)
    op.alter_column('tenants', 'code',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('tenants', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('tenants', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_tenants_id'), table_name='tenants')
    op.drop_constraint(op.f('tenants_name_key'), 'tenants', type_='unique')
    op.drop_column('tenants', 'settings')
    op.drop_column('tenants', 'domain')
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_tenant_id'), table_name='users')
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.alter_column('vehicles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('vehicles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_vehicles_id'), table_name='vehicles')
    op.drop_constraint(op.f('vehicles_license_plate_key'), 'vehicles', type_='unique')
    op.drop_index(op.f('ix_vehicles_license_plate'), table_name='vehicles')
    op.create_index(op.f('ix_vehicles_license_plate'), 'vehicles', ['license_plate'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_vehicles_license_plate'), table_name='vehicles')
    op.create_index(op.f('ix_vehicles_license_plate'), 'vehicles', ['license_plate'], unique=False)
    op.create_unique_constraint(op.f('vehicles_license_plate_key'), 'vehicles', ['license_plate'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_vehicles_id'), 'vehicles', ['id'], unique=False)
    op.alter_column('vehicles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('vehicles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=False)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_users_tenant_id'), 'users', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.add_column('tenants', sa.Column('domain', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('tenants', sa.Column('settings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.create_unique_constraint(op.f('tenants_name_key'), 'tenants', ['name'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_tenants_id'), 'tenants', ['id'], unique=False)
    op.alter_column('tenants', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('tenants', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('tenants', 'code',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.drop_index(op.f('ix_shipments_shipment_number'), table_name='shipments')
    op.create_index(op.f('ix_shipments_shipment_number'), 'shipments', ['shipment_number'], unique=False)
    op.create_unique_constraint(op.f('shipments_shipment_number_key'), 'shipments', ['shipment_number'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_shipments_id'), 'shipments', ['id'], unique=False)
    op.alter_column('shipments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('shipments', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_refresh_tokens_token'), table_name='refresh_tokens')
    op.create_index(op.f('ix_refresh_tokens_token'), 'refresh_tokens', ['token'], unique=False)
    op.create_unique_constraint(op.f('refresh_tokens_token_key'), 'refresh_tokens', ['token'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_refresh_tokens_id'), 'refresh_tokens', ['id'], unique=False)
    op.alter_column('refresh_tokens', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('refresh_tokens', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_ai_model_configs_id'), 'ai_model_configs', ['id'], unique=False)
    op.alter_column('ai_model_configs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('ai_model_configs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_ai_conversations_id'), 'ai_conversations', ['id'], unique=False)
    op.alter_column('ai_conversations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('ai_conversations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_gps_locations_tenant_id'), table_name='gps_locations')
    op.drop_table('gps_locations')
    # ### end Alembic commands ###
