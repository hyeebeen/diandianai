# 生产环境 Docker Compose 配置
version: '3.8'

networks:
  logistics_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_master_data:
  postgres_slave1_data:
  postgres_slave2_data:
  redis_master_data:
  redis_slave1_data:
  redis_slave2_data:
  nginx_logs:
  app_logs:

services:
  # Nginx 负载均衡器
  nginx:
    image: nginx:1.25-alpine
    container_name: logistics_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - logistics-api-1
      - logistics-api-2
      - logistics-api-3
      - logistics-api-4
    restart: unless-stopped
    networks:
      logistics_network:
        ipv4_address: 172.20.0.10

  # FastAPI 应用服务器 - 实例1
  logistics-api-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: logistics_api_1
    ports:
      - "8001:8000"
    environment:
      - WORKERS=4
      - DATABASE_MASTER_URL=postgresql+asyncpg://logistics:LogisticsPass2024@postgres-master:5432/logistics_db
      - DATABASE_SLAVE_URLS=postgresql+asyncpg://logistics:LogisticsPass2024@postgres-slave1:5432/logistics_db,postgresql+asyncpg://logistics:LogisticsPass2024@postgres-slave2:5432/logistics_db
      - REDIS_SENTINEL_HOSTS=redis-sentinel-1:26379,redis-sentinel-2:26379,redis-sentinel-3:26379
      - REDIS_MASTER_NAME=logistics-master
      - REDIS_PASSWORD=LogisticsRedisPass2024
      - LOG_LEVEL=INFO
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - app_logs:/var/log/logistics
    depends_on:
      - postgres-master
      - redis-master
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      logistics_network:
        ipv4_address: 172.20.0.21

  # FastAPI 应用服务器 - 实例2
  logistics-api-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: logistics_api_2
    ports:
      - "8002:8000"
    environment:
      - WORKERS=4
      - DATABASE_MASTER_URL=postgresql+asyncpg://logistics:LogisticsPass2024@postgres-master:5432/logistics_db
      - DATABASE_SLAVE_URLS=postgresql+asyncpg://logistics:LogisticsPass2024@postgres-slave1:5432/logistics_db,postgresql+asyncpg://logistics:LogisticsPass2024@postgres-slave2:5432/logistics_db
      - REDIS_SENTINEL_HOSTS=redis-sentinel-1:26379,redis-sentinel-2:26379,redis-sentinel-3:26379
      - REDIS_MASTER_NAME=logistics-master
      - REDIS_PASSWORD=LogisticsRedisPass2024
      - LOG_LEVEL=INFO
    volumes:
      - app_logs:/var/log/logistics
    depends_on:
      - postgres-master
      - redis-master
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      logistics_network:
        ipv4_address: 172.20.0.22

  # FastAPI 应用服务器 - 实例3
  logistics-api-3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: logistics_api_3
    ports:
      - "8003:8000"
    environment:
      - WORKERS=4
      - DATABASE_MASTER_URL=postgresql+asyncpg://logistics:LogisticsPass2024@postgres-master:5432/logistics_db
      - DATABASE_SLAVE_URLS=postgresql+asyncpg://logistics:LogisticsPass2024@postgres-slave1:5432/logistics_db,postgresql+asyncpg://logistics:LogisticsPass2024@postgres-slave2:5432/logistics_db
      - REDIS_SENTINEL_HOSTS=redis-sentinel-1:26379,redis-sentinel-2:26379,redis-sentinel-3:26379
      - REDIS_MASTER_NAME=logistics-master
      - REDIS_PASSWORD=LogisticsRedisPass2024
      - LOG_LEVEL=INFO
    volumes:
      - app_logs:/var/log/logistics
    depends_on:
      - postgres-master
      - redis-master
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      logistics_network:
        ipv4_address: 172.20.0.23

  # FastAPI 应用服务器 - 实例4
  logistics-api-4:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: logistics_api_4
    ports:
      - "8004:8000"
    environment:
      - WORKERS=4
      - DATABASE_MASTER_URL=postgresql+asyncpg://logistics:LogisticsPass2024@postgres-master:5432/logistics_db
      - DATABASE_SLAVE_URLS=postgresql+asyncpg://logistics:LogisticsPass2024@postgres-slave1:5432/logistics_db,postgresql+asyncpg://logistics:LogisticsPass2024@postgres-slave2:5432/logistics_db
      - REDIS_SENTINEL_HOSTS=redis-sentinel-1:26379,redis-sentinel-2:26379,redis-sentinel-3:26379
      - REDIS_MASTER_NAME=logistics-master
      - REDIS_PASSWORD=LogisticsRedisPass2024
      - LOG_LEVEL=INFO
    volumes:
      - app_logs:/var/log/logistics
    depends_on:
      - postgres-master
      - redis-master
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      logistics_network:
        ipv4_address: 172.20.0.24

  # PostgreSQL 主库
  postgres-master:
    image: postgres:15-alpine
    container_name: postgres_master
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: logistics_db
      POSTGRES_USER: logistics
      POSTGRES_PASSWORD: LogisticsPass2024
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ReplicatorPass2024
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
      - ./postgres/master/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/master/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./postgres/init:/docker-entrypoint-initdb.d
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    networks:
      logistics_network:
        ipv4_address: 172.20.0.31

  # PostgreSQL 从库1
  postgres-slave1:
    image: postgres:15-alpine
    container_name: postgres_slave1
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: logistics_db
      POSTGRES_USER: logistics
      POSTGRES_PASSWORD: LogisticsPass2024
      PGUSER: postgres
      POSTGRES_MASTER_SERVICE: postgres-master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ReplicatorPass2024
    volumes:
      - postgres_slave1_data:/var/lib/postgresql/data
      - ./postgres/slave/setup-slave.sh:/docker-entrypoint-initdb.d/setup-slave.sh:ro
    depends_on:
      - postgres-master
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      logistics_network:
        ipv4_address: 172.20.0.32

  # PostgreSQL 从库2
  postgres-slave2:
    image: postgres:15-alpine
    container_name: postgres_slave2
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: logistics_db
      POSTGRES_USER: logistics
      POSTGRES_PASSWORD: LogisticsPass2024
      PGUSER: postgres
      POSTGRES_MASTER_SERVICE: postgres-master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ReplicatorPass2024
    volumes:
      - postgres_slave2_data:/var/lib/postgresql/data
      - ./postgres/slave/setup-slave.sh:/docker-entrypoint-initdb.d/setup-slave.sh:ro
    depends_on:
      - postgres-master
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      logistics_network:
        ipv4_address: 172.20.0.33

  # Redis 主库
  redis-master:
    image: redis:7-alpine
    container_name: redis_master
    ports:
      - "6379:6379"
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis_master_data:/data
      - ./redis/master/redis.conf:/etc/redis/redis.conf:ro
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      logistics_network:
        ipv4_address: 172.20.0.41

  # Redis 从库1
  redis-slave1:
    image: redis:7-alpine
    container_name: redis_slave1
    ports:
      - "6380:6379"
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis_slave1_data:/data
      - ./redis/slave/redis.conf:/etc/redis/redis.conf:ro
    depends_on:
      - redis-master
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      logistics_network:
        ipv4_address: 172.20.0.42

  # Redis 从库2
  redis-slave2:
    image: redis:7-alpine
    container_name: redis_slave2
    ports:
      - "6381:6379"
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis_slave2_data:/data
      - ./redis/slave/redis.conf:/etc/redis/redis.conf:ro
    depends_on:
      - redis-master
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      logistics_network:
        ipv4_address: 172.20.0.43

  # Redis Sentinel 1
  redis-sentinel-1:
    image: redis:7-alpine
    container_name: redis_sentinel_1
    ports:
      - "26379:26379"
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./redis/sentinel/sentinel.conf:/etc/redis/sentinel.conf:ro
    depends_on:
      - redis-master
    restart: unless-stopped
    networks:
      logistics_network:
        ipv4_address: 172.20.0.51

  # Redis Sentinel 2
  redis-sentinel-2:
    image: redis:7-alpine
    container_name: redis_sentinel_2
    ports:
      - "26380:26379"
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./redis/sentinel/sentinel.conf:/etc/redis/sentinel.conf:ro
    depends_on:
      - redis-master
    restart: unless-stopped
    networks:
      logistics_network:
        ipv4_address: 172.20.0.52

  # Redis Sentinel 3
  redis-sentinel-3:
    image: redis:7-alpine
    container_name: redis_sentinel_3
    ports:
      - "26381:26379"
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./redis/sentinel/sentinel.conf:/etc/redis/sentinel.conf:ro
    depends_on:
      - redis-master
    restart: unless-stopped
    networks:
      logistics_network:
        ipv4_address: 172.20.0.53

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: logistics_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      logistics_network:
        ipv4_address: 172.20.0.61

  # Grafana 仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: logistics_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: LogisticsGrafana2024
    volumes:
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      logistics_network:
        ipv4_address: 172.20.0.62